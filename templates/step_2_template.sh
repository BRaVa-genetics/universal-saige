# Note that because of how the containers are set up, the files passed must be
# contained within the working directory. To change this, edit the
# `run_container.sh` script which calls the docker/singularity container for
# all steps.

# Run SAIGE-variant or SAIGE-gene
TEST_TYPE={"variant","gene_testing"}

# Which chromosome to analyse
# Ensure that the chromosome name flagged by --chr exactly matches the
# chromosome name in the .bim file. For example, if the chromosome is labelled
# as '11' in the first column of the .bim, --chr chr11 will not work (but --chr
# 11 will).
chrom=["chr20"]

# Plink filename prefix of .bim/.bed/.fam for WES (or WGS restricted to exons).
# These must be relative to, and contained in, the current working directory.
plink=["path/to/plink/files"]

# vcf filename prefix for WES (or WGS restricted to exons).
# These must be relative to, and contained in, the current working directory.
vcf=["path/to/vcf/file"]

# model file output from SAIGE step 1. This must be relative to the current
# working directory. It will be of the form ${out_step1}.varianceRatio.txt 
# where ${out_step1} is the outout prefix to data generated by step 1.
model_file=["/path/to/model/file"]

# varianceRatio file output from SAIGE step 1. This must be relative to the
# current working directory. It will be of the form
# ${out_step1}.varianceRatio.txt where ${out_step1} is the outout prefix to
# data generated by step 1.
variance_ratio=["/path/to/varianceratio"]

# variant annotations which can be generated here:
# https://github.com/BRaVa-genetics/variant-annotation
group_file=["/path/to/group_file"]
# A comma separated list of annotations to use in the group test,
# use the following:
annots="pLoF,damaging_missense_or_protein_altering,other_missense_or_protein_altering,synonymous,pLoF:damaging_missense_or_protein_altering,pLoF:damaging_missense_or_protein_altering:other_missense_or_protein_altering:synonymous"

# Output prefix for the data generated by this step (step 2).
out_step2=["out"]

# Is singularity available? If not, it is assumed that docker is available.
IS_SINGULARITY={"false","true"}

# Path to the GRM file created by step 0.
# It will be of the form 
# ${out_step0}.relatednessCutoff_0.05_5000_randomMarkersUsed.sparseGRM.mtx where
# ${out_step0} is the output prefix to data generated by step 0. 
GRM=["path/to/GRM/file"]

# Path to the GRM sample IDs file created by step 0.
# It will be of the form 
# ${out_step0}.relatednessCutoff_0.05_5000_randomMarkersUsed.sparseGRM.mtx.sampleIDs.txt
# where ${out_step0} is the output prefix to data generated by step 0.
GRM_samples=["path/to/GRM/sampleID/file"]

# plink - comment out if --vcf is used
bash 02_step2_SPAtests_variant_and_gene.sh \
    --chr $chrom \
    --testType ${TEST_TYPE} \
    --plink ${plink} \
    --modelFile ${model_file} \
    --varianceRatio ${variance_ratio} \
    --groupFile ${group_file} \
    --annotations ${annots} \
    --outputPrefix ${out_step2} \
    --isSingularity $IS_SINGULARITY \
    --sparseGRM ${GRM} \
    --sparseGRMID ${GRM_samples}

# vcf - comment out if --plink is used
bash 02_step2_SPAtests_variant_and_gene.sh \
    --chr $chrom \
    --testType ${TEST_TYPE} \
    --vcf ${vcf} \
    --modelFile ${model_file} \
    --varianceRatio ${variance_ratio} \
    --groupFile ${group_file} \
    --annotations ${annots} \
    --outputPrefix ${out_step2} \
    --isSingularity $IS_SINGULARITY \
    --sparseGRM ${GRM} \
    --sparseGRMID ${GRM_samples}
